name: "Release actions"

on:
  release:
    types: ["published"]

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to PyPi
    steps:
      - uses: actions/checkout@v2
      - name: Checkout submodules
        uses: textbook/git-checkout-submodule-action@master
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.x"

      # Get updated translations
      - name: Download Lokalise CLI
        run: |
          curl -sfL https://raw.githubusercontent.com/lokalise/lokalise-cli-2-go/master/install.sh | sh
      - name: Downloading translations
        run: |
          ./bin/lokalise2 \
            --token "${{ secrets.lokalise_token }}"\
            --project-id "854515055f679055040b37.42677693" \
            file download \
            --format json \
            --unzip-to /tmp/lokalise \
            --export-empty-as skip \
            --export-sort a_z \
            --original-filenames=false  \
            --bundle-structure %LANG_ISO%.%FORMAT%
      - name: Move new  translations
        run: |
          rm -R /home/runner/work/frontend/frontend/src/localize/languages/
          mkdir -p /home/runner/work/frontend/frontend/src/localize/languages/
          cp /tmp/lokalise/* /home/runner/work/frontend/frontend/src/localize/languages/

      - name: "Set version number"
        run: |
          export version=${{ github.ref }}
          sed -i "s|main|${version##*/}|" ./setup.py
          sed -i "s|main|${version##*/}|" ./hacs_frontend/version.py
          sed -i "s|main|${version##*/}|" ./src/version.ts

          cat ./setup.py
          cat ./hacs_frontend/version.py
          cat ./src/version.ts

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
          make bootstrap

      - name: Build
        run: make build

      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*

      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@0.0.2
        with:
          args: "New version of HACS frontend are now pushed to [PyPi](https://pypi.org/project/hacs-frontend)."
  bump:
    runs-on: ubuntu-latest
    needs: deploy
    name: Bump hacs/integration
    steps:
      - name: Initialize git
        uses: home-assistant/actions/helpers/git-init@master
        with:
          name: ${{ secrets.GIT_NAME }}
          email: ${{ secrets.GIT_EMAIL }}
          token: ${{ secrets.GIT_TOKEN }}

      - name: Clone hacs/integration
        run: git clone --depth 1 https://github.com/hacs/integration.git /tmp/integration

      - name: Bump version
        run: |
          cd /tmp/integration
          make bump-frontend

      - name: "Set version number"
        id: version
        run: |
          version=${{ github.ref }}
          echo "::set-output name=version::${version##*/}"

      - name: Create PR
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GIT_TOKEN}}
          script: |
            github.issues.createComment({
              owner: "hacs",
              repo: "integration",
              head: 'frontend/${{ steps.version.outputs.version }}',
              base: 'main'
            })
